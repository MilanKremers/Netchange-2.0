
==================== FINAL INTERFACE ====================
2020-01-03 15:34:55.5843099 UTC

interface main:Main 8065
  interface hash: 51cdcd03053ff18b23d64e011c5ef3a0
  ABI hash: 3592f2cc64f03b981d5b89f15217be67
  export-list hash: 0a081fa08606e95b62f97634f7186f60
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e9a1e848355f6ba1eac7c0e989cd19e5
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.checkMin
  Main.checkMin'
  Main.checkMin''
  Main.connectSocket
  Main.failMessage
  Main.getDisToV
  Main.getDisToV'
  Main.getList
  Main.getPrefW
  Main.getW
  Main.handleConnection
  Main.initDU
  Main.initNBU
  Main.initNDis
  Main.initialize
  Main.isPrefW
  Main.listenForConnections
  Main.main
  Main.parseConfig
  Main.portToAddress
  Main.processMessage
  Main.processMessage'
  Main.readCommandLineArguments
  Main.recom
  Main.recom'
  Main.recomAllV
  Main.recomLocal
  Main.recompute
  Main.repairAllV
  Main.repairMessage
  Main.singleNeighbourNDis
  Main.updateAt
  Main.updateN
  Main.updateNDisAt
  Main.updateNeighU
  Main.updateV
  Main.Config{Main.Config cfgMode}
  Main.Message{Main.Fail Main.MyDist Main.Repair}
  Main.Mode{Main.Disconnect Main.MakeConnection Main.SendMessage Main.Table}
  Main.Network{Main.Network dU dests n nbU ndisU neighU u}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 network-2.8.0.1 stm-2.5.0.0
orphans: stm-2.5.0.0:Control.Monad.STM
         network-2.8.0.1:Network.Socket base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Exts base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Concurrent db627a2e14aa77645810b5e18852cc54
import  -/  base-4.12.0.0:Control.Exception 68d632685955b01899aa782b05b79cdf
import  -/  base-4.12.0.0:Control.Exception.Base 520b7537fcce27638136bb16d9a55e53
import  -/  base-4.12.0.0:Control.Monad 54356f938d3817a0115f506fce4f2fa3
import  -/  base-4.12.0.0:Data.Either 3f22662ea029dfb63e64f318274cbbbd
import  -/  base-4.12.0.0:Data.Foldable bdeac546b12282c8986759606b9295a5
import  -/  base-4.12.0.0:Data.IORef 9fe6be300ad920563b6d0585952c3155
import  -/  base-4.12.0.0:Data.List 6c60559263db7cf0f22549b9673785b9
import  -/  base-4.12.0.0:Data.OldList 9c79c2259344fa5285ac49797d9c5db1
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Conc.IO e5574a04330387198d27d33dfb992cd8
import  -/  base-4.12.0.0:GHC.Conc.Sync fae6c83841bcf1584e2587725f53d9ce
import  -/  base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import  -/  base-4.12.0.0:GHC.IO.Exception 99271e07ec0e09b76d45c79794dad266
import  -/  base-4.12.0.0:GHC.IO.Handle 5b3f689b082eee6e7562e9b58323b91a
import  -/  base-4.12.0.0:GHC.IO.Handle.FD 5b13f4cf43b26c3d52e20458852a8546
import  -/  base-4.12.0.0:GHC.IO.Handle.Text 2ca19f0c4c6b23c3ad9d1464d36c5281
import  -/  base-4.12.0.0:GHC.IO.Handle.Types b0667350495b7969f4b13a8e9686d1b4
import  -/  base-4.12.0.0:GHC.IO.IOMode 64e15bc6e405c4ae814493543509e7ab
import  -/  base-4.12.0.0:GHC.IORef 08be4ed51bab2548b874b071705c05a2
import  -/  base-4.12.0.0:GHC.Num 8203d3fee487126cffd5e55ba5d0e8c3
import  -/  base-4.12.0.0:GHC.Real 3b42f3125c1d17d4e4b4437a3c97310f
import  -/  base-4.12.0.0:GHC.Show fa6032f3f820e8e8ec87b97bdca4e160
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Environment 045df705c1f205b31d24a0f6340ea2db
import  -/  base-4.12.0.0:System.IO 51ffc52e2e8495d5c7b596557cf2be89
import  -/  base-4.12.0.0:Text.Read 580457154dc9d710b792a13b428d58dd
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  network-2.8.0.1:Network.Socket cccb3c178b1f8d4043b518ed5f994246
import  -/  network-2.8.0.1:Network.Socket.Types 8885d0583783d86ae72c97c90ee0757a
import  -/  stm-2.5.0.0:Control.Concurrent.STM c418f6f5d5174c7fcc2a4eb1734356a3
0c96a0cc83d3b370161169a447b7c3fe
  $fShowConfig :: GHC.Show.Show Main.Config
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Config
                  Main.$fShowConfig_$cshowsPrec1
                  Main.$fShowConfig_$cshow
                  Main.$fShowConfig_$cshowList -}
0c96a0cc83d3b370161169a447b7c3fe
  $fShowConfig1 :: Main.Config -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>,
     Unfolding: (\ (w :: Main.Config) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Config ww1 ->
                 Main.$w$cshowsPrec 0# ww1 w1 }) -}
36c99da57b1e839336b67f7b132f5fdf
  $fShowConfig10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SendMessage "#) -}
0393be56020c668824b4090e576f3f77
  $fShowConfig11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.$fShowConfig12
                   Main.$fShowConfig7) -}
4f0ffd0deb8b05390e3057360b7f9bdd
  $fShowConfig12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowConfig13) -}
f528c4c495071cb9f87e15cc853d925d
  $fShowConfig13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Table"#) -}
c5bdba7db96f672b632d295ffc107f20
  $fShowConfig2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
9316464bd4816198eec268f858276be8
  $fShowConfig3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ff1c46587bca8e7d77da3176abd80584
  $fShowConfig4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cfgMode = "#) -}
ef1a45b80dc6124d632ee4fc9beb8d82
  $fShowConfig5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Config {"#) -}
052bc1ea8427c2e8e4f285580b14a02c
  $fShowConfig6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Disconnect "#) -}
ec067dfed3cd7e6b4583d05cf7209139
  $fShowConfig7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowConfig2) -}
d35ef6f1e1f044071e3e40fe3e9ccc96
  $fShowConfig8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MakeConnection "#) -}
c37d49094ba19c61919b8dcea046bf3d
  $fShowConfig9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   Main.$fShowConfig7) -}
0c96a0cc83d3b370161169a447b7c3fe
  $fShowConfig_$cshow :: Main.Config -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Config) ->
                 case w of ww { Main.Config ww1 -> Main.$w$cshow ww1 }) -}
0c96a0cc83d3b370161169a447b7c3fe
  $fShowConfig_$cshowList :: [Main.Config] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Config]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Config Main.$fShowConfig1 ls s) -}
693a77d173cafa45fb28101377f14507
  $fShowConfig_$cshowsPrec ::
    GHC.Types.Int -> Main.Mode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
0c96a0cc83d3b370161169a447b7c3fe
  $fShowConfig_$cshowsPrec1 ::
    GHC.Types.Int -> Main.Config -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Config)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Config ww3 ->
                 Main.$w$cshowsPrec ww1 ww3 w2 } }) -}
1d1d49de00661bbc931580607b53799f
  $fShowConfig_showl :: [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2 -}
693a77d173cafa45fb28101377f14507
  $fShowMode :: GHC.Show.Show Main.Mode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Mode
                  Main.$fShowConfig_$cshowsPrec
                  Main.$fShowMode_$cshow
                  Main.$fShowMode_$cshowList -}
693a77d173cafa45fb28101377f14507
  $fShowMode1 :: Main.Mode -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowConfig_$cshowsPrec Main.$fShowConfig3) -}
693a77d173cafa45fb28101377f14507
  $fShowMode_$cshow :: Main.Mode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Mode) ->
                 Main.$fShowConfig_$cshowsPrec
                   Main.$fShowConfig3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
693a77d173cafa45fb28101377f14507
  $fShowMode_$cshowList :: [Main.Mode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Mode]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Mode Main.$fShowMode1 ls s) -}
9998e9621748e31b0d4ee081a7c3c5f3
  $fShowNetwork :: GHC.Show.Show Main.Network
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Network
                  Main.$fShowNetwork_$cshowsPrec
                  Main.$fShowNetwork_$cshow
                  Main.$fShowNetwork_$cshowList -}
9998e9621748e31b0d4ee081a7c3c5f3
  $fShowNetwork1 :: Main.Network -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Main.Network) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Main.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 w1 }) -}
9998e9621748e31b0d4ee081a7c3c5f3
  $fShowNetwork_$cshow :: Main.Network -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Network) ->
                 Main.$fShowNetwork_$cshowsPrec
                   Main.$fShowConfig3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9998e9621748e31b0d4ee081a7c3c5f3
  $fShowNetwork_$cshowList :: [Main.Network] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Network]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Network Main.$fShowNetwork1 ls s) -}
9998e9621748e31b0d4ee081a7c3c5f3
  $fShowNetwork_$cshowsPrec ::
    GHC.Types.Int -> Main.Network -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Network)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Network ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 w2 } }) -}
2325b3f747283543924c59e0b1c4b32d
  $tc'Config :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4690333293156203576##
                   12896081349187073058##
                   Main.$trModule
                   Main.$tc'Config2
                   0#
                   Main.$tc'Config1) -}
92b6582e6b350a68b62183011221693f
  $tc'Config1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
20c2828ef43636950415156c2b19dafc
  $tc'Config2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Config3) -}
9960cf9a94e1e31d59b70889aaf5337a
  $tc'Config3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Config"#) -}
b698b1802fc08ac477923826723b75ba
  $tc'Disconnect :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2126008672286768630##
                   2653350885631699551##
                   Main.$trModule
                   Main.$tc'Disconnect2
                   0#
                   Main.$tc'Disconnect1) -}
2d698fdd5b22aa5428f0e5819cf73f36
  $tc'Disconnect1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0012549bdb14c7b64d654f70c4961660
  $tc'Disconnect2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Disconnect3) -}
74005539ab9b78da91d9ece6e3cfcf42
  $tc'Disconnect3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Disconnect"#) -}
ac20f1150c77f71f91320515f16574db
  $tc'Fail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10289974402198452585##
                   2467907747763061704##
                   Main.$trModule
                   Main.$tc'Fail2
                   0#
                   Main.$tc'Fail1) -}
3600c8f64daa1f00a96a5576979fa3ad
  $tc'Fail1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
631fcdd94b1f2097a33ea82b008e6240
  $tc'Fail2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Fail3) -}
cafd21127c76469c60a6f795b7bf5e9f
  $tc'Fail3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Fail"#) -}
6a32fbdceee8ab07a16924022db264ad
  $tc'MakeConnection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14475644604407675716##
                   13829114441449612892##
                   Main.$trModule
                   Main.$tc'MakeConnection1
                   0#
                   Main.$tc'Disconnect1) -}
53ce244ee07e76462693250d1db756dc
  $tc'MakeConnection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'MakeConnection2) -}
79a09b2c0c6b591efd43063b190d7637
  $tc'MakeConnection2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MakeConnection"#) -}
e11a0fd9fbeb2c9335b34f696df6eefa
  $tc'MyDist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2983857343219674188##
                   7119897320658145313##
                   Main.$trModule
                   Main.$tc'MyDist2
                   0#
                   Main.$tc'MyDist1) -}
9db8faffaba28e88ddec6c64796d3bde
  $tc'MyDist1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
94d9ed765198f14e7869942eb10fa78b
  $tc'MyDist2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'MyDist3) -}
37db7880915b395de631f7f0b964ff8d
  $tc'MyDist3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MyDist"#) -}
5045e53760825f8337bb060d85fcf5d3
  $tc'Network :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16556360694637520600##
                   14670768776310000622##
                   Main.$trModule
                   Main.$tc'Network2
                   0#
                   Main.$tc'Network1) -}
4eafe5fabf4e372e2d889c80beb7af2b
  $tc'Network1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fc5469ee4b522e6a519559f88a3b03d1
  $tc'Network2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Network3) -}
0397e31cd668ae25710dafc78cee13dd
  $tc'Network3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Network"#) -}
3a97463831472567451f8ffdf92056c5
  $tc'Repair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16869644302034022387##
                   5078037645778573254##
                   Main.$trModule
                   Main.$tc'Repair1
                   0#
                   Main.$tc'Fail1) -}
0e48434cec0475461c7f7c796773ae3a
  $tc'Repair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Repair2) -}
89a3f40b957a2605ee7fd0bd7ac1b3d9
  $tc'Repair2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Repair"#) -}
4b71379db55f81a72e0207c2e0c8e68f
  $tc'SendMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   900272736172339960##
                   13300265837979016031##
                   Main.$trModule
                   Main.$tc'SendMessage2
                   0#
                   Main.$tc'SendMessage1) -}
6ab195c3266f3ff283b251de2c90cf34
  $tc'SendMessage1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fa757c43f0d0ebe4ef2c23bec134c92c
  $tc'SendMessage2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'SendMessage3) -}
c39ceede285ece4ecbdb222c81642914
  $tc'SendMessage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SendMessage"#) -}
dda6b570017b098333c0a3c6332ad721
  $tc'Table :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16219778146172991990##
                   9457094216153909365##
                   Main.$trModule
                   Main.$tc'Table2
                   0#
                   Main.$tc'Table1) -}
ca2a0a6607bc5966e47d654d91f8a386
  $tc'Table1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f67a24f651528785ad557b97023d813f
  $tc'Table2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Table3) -}
539df1252a690961afe5f56ab4bbb7fd
  $tc'Table3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Table"#) -}
d8640e0e9574c720708e90364f63da51
  $tcConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10450182617494932244##
                   1690858232360082954##
                   Main.$trModule
                   Main.$tcConfig1
                   0#
                   GHC.Types.krep$*) -}
a7bed1c3e7891dc97bd64bda2583c967
  $tcConfig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcConfig2) -}
24c7bde114ecec3d09d5748aadec8a65
  $tcConfig2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Config"#) -}
9f82a2615d2517bade7b8f10f800b21a
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4281840789288854734##
                   3956224079122367496##
                   Main.$trModule
                   Main.$tcMessage1
                   0#
                   GHC.Types.krep$*) -}
0cdef909b663f81e7bdb48dff574426e
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcMessage2) -}
7b0ceb6833994ad4dd6f3399e7964cf1
  $tcMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Message"#) -}
473b8c5d7915303bde3c64603b065fb7
  $tcMode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3931013417371853809##
                   9275087900407655097##
                   Main.$trModule
                   Main.$tcMode1
                   0#
                   GHC.Types.krep$*) -}
0f9756662f0ff817fbe7a5be8b63f8c9
  $tcMode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcMode2) -}
3ef9dad7b1b99be1a28609c09c74a9cb
  $tcMode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Mode"#) -}
45e52e4d937710bb0b467a86490e55c8
  $tcNetwork :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7223228021634007101##
                   12508657813776177072##
                   Main.$trModule
                   Main.$tcNetwork1
                   0#
                   GHC.Types.krep$*) -}
439e034b051ec91e0c912d66db66fb4f
  $tcNetwork1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcNetwork2) -}
cc77bf2995080907a2391f4e25836992
  $tcNetwork2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Network"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
fc9ff45ed9d47c47ff12f09a29420ea0
  $w$cshow :: Main.Mode -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: Main.Mode) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowConfig5
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowConfig4
                      (case ww of wild {
                         Main.Table -> Main.$fShowConfig11
                         Main.SendMessage b1 b2
                         -> GHC.CString.unpackAppendCString#
                              Main.$fShowConfig10
                              (case b1 of ww2 { GHC.Types.I# ww3 ->
                               case GHC.Show.$wshowSignedInt
                                      11#
                                      ww3
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (case b2 of wild1 {
                                            [] -> Main.$fShowConfig9
                                            : x xs
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__3
                                                 (GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.$fShow(,)3
                                                    (GHC.Show.showLitString
                                                       x
                                                       (GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.$fShow(,)3
                                                          (Main.$fShowConfig_showl
                                                             xs)))) })) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                         Main.MakeConnection b1
                         -> GHC.CString.unpackAppendCString#
                              Main.$fShowConfig8
                              (case b1 of ww2 { GHC.Types.I# ww3 ->
                               case GHC.Show.$wshowSignedInt
                                      11#
                                      ww3
                                      Main.$fShowConfig7 of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                         Main.Disconnect b1
                         -> GHC.CString.unpackAppendCString#
                              Main.$fShowConfig6
                              (case b1 of ww2 { GHC.Types.I# ww3 ->
                               case GHC.Show.$wshowSignedInt
                                      11#
                                      ww3
                                      Main.$fShowConfig7 of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }))) -}
15879cbfa67e1bbaf2eea82f04a38d0c
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.Mode -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.Mode)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowConfig5
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowConfig4
                           (Main.$fShowConfig_$cshowsPrec
                              Main.$fShowConfig3
                              ww1
                              (GHC.CString.unpackAppendCString# Main.$fShowConfig2 w)))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowConfig5
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowConfig4
                              (Main.$fShowConfig_$cshowsPrec
                                 Main.$fShowConfig3
                                 ww1
                                 (GHC.CString.unpackAppendCString#
                                    Main.$fShowConfig2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))))) }) -}
67dfe42672c633b48918d155814a8d9b
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 9,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [2] -}
3c1977e4f28dda217f126eef3942dcfb
  $wcheckMin ::
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: [GHC.Types.Int])
                   (w2 :: [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]) ->
                 case Main.checkMin' w w1 w2 of wild {
                   [] -> case GHC.List.minimum2 ret_ty GHC.Prim.Int# of {}
                   : ipv ipv1
                   -> case ipv of ww { GHC.Types.I# ww1 ->
                      case GHC.List.$wgo1 ipv1 ww1 of ww2 { DEFAULT ->
                      GHC.Prim.+# 1# ww2 } } }) -}
7adcc7563c0d4b5f9c53d16b951e044e
  $wcheckMin'' ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <L,U(U)><L,1*U(U)><S,1*U>, Inline: [2] -}
971efed19e6bdc2ce9f51605969870a5
  $wgetDisToV' ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Inline: [2] -}
78c82f29ef2a716e1283aeda26128b82
  $wgetPrefW ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,U(U)><S,1*U>,
     Inline: [2] -}
f4d2d4885abd67f5dbe2962d1f5395d5
  $wisPrefW ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U>,
     Inline: [2] -}
3b2800cbb89deca358718e8b771a539a
  $wlistenForConnections ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [2] -}
d34f2225f9826fcb8e08a587dfbd6d41
  $wparseConfig :: [GHC.Base.String] -> (# Main.Mode #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: [GHC.Base.String]) ->
                 case w of wild {
                   [] -> case Main.parseConfig5 ret_ty (# Main.Mode #) of {}
                   : mode' rest
                   -> case mode' of wild1 {
                        [] -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {}
                        : ds ds1
                        -> case ds of wild2 { GHC.Types.C# ds2 ->
                           case ds2 of ds3 {
                             DEFAULT -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {}
                             'B'#
                             -> case ds1 of wild3 {
                                  []
                                  -> case rest of wild4 {
                                       [] -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {}
                                       : x ds4
                                       -> case ds4 of wild5 {
                                            []
                                            -> (# Main.MakeConnection
                                                    (case Text.Read.readEither8
                                                            @ GHC.Types.Int
                                                            (Text.ParserCombinators.ReadP.run
                                                               @ GHC.Types.Int
                                                               Main.parseConfig3
                                                               x) of wild6 {
                                                       [] -> Main.parseConfig2
                                                       : x1 ds5
                                                       -> case ds5 of wild7 {
                                                            [] -> x1
                                                            : ipv ipv1 -> Main.parseConfig1 } }) #)
                                            : ipv ipv1
                                            -> case Main.parseConfig4
                                               ret_ty (# Main.Mode #)
                                               of {} } }
                                  : ipv ipv1
                                  -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {} }
                             'C'#
                             -> case ds1 of wild3 {
                                  []
                                  -> case rest of wild4 {
                                       [] -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {}
                                       : x y
                                       -> (# Main.SendMessage
                                               (case Text.Read.readEither8
                                                       @ GHC.Types.Int
                                                       (Text.ParserCombinators.ReadP.run
                                                          @ GHC.Types.Int
                                                          Main.parseConfig3
                                                          x) of wild5 {
                                                  [] -> Main.parseConfig2
                                                  : x1 ds4
                                                  -> case ds4 of wild6 {
                                                       [] -> x1 : ipv ipv1 -> Main.parseConfig1 } })
                                               y #) }
                                  : ipv ipv1
                                  -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {} }
                             'D'#
                             -> case ds1 of wild3 {
                                  []
                                  -> case rest of wild4 {
                                       [] -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {}
                                       : x ds4
                                       -> case ds4 of wild5 {
                                            []
                                            -> (# Main.Disconnect
                                                    (case Text.Read.readEither8
                                                            @ GHC.Types.Int
                                                            (Text.ParserCombinators.ReadP.run
                                                               @ GHC.Types.Int
                                                               Main.parseConfig3
                                                               x) of wild6 {
                                                       [] -> Main.parseConfig2
                                                       : x1 ds5
                                                       -> case ds5 of wild7 {
                                                            [] -> x1
                                                            : ipv ipv1 -> Main.parseConfig1 } }) #)
                                            : ipv ipv1
                                            -> case Main.parseConfig4
                                               ret_ty (# Main.Mode #)
                                               of {} } }
                                  : ipv ipv1
                                  -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {} }
                             'R'#
                             -> case ds1 of wild3 {
                                  []
                                  -> case rest of wild4 {
                                       [] -> (# Main.Table #)
                                       : ipv ipv1
                                       -> case Main.parseConfig4 ret_ty (# Main.Mode #) of {} }
                                  : ipv ipv1
                                  -> case Main.parseConfig4
                                     ret_ty (# Main.Mode #)
                                     of {} } } } } }) -}
e0203599a7234b56f928ea0223b3cc20
  $wprocessMessage ::
    Main.Message
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> (# GHC.Types.Int, GHC.Types.Int, [GHC.Types.Int],
          [GHC.Types.Int], [(GHC.Types.Int, GHC.Types.Int)],
          [(GHC.Types.Int, GHC.Types.Int)],
          [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])] #)
  {- Arity: 8,
     Strictness: <S,1*U><S,U><L,U(U)><L,U><L,U><L,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (w :: Main.Message)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: [GHC.Types.Int])
                   (ww3 :: [GHC.Types.Int])
                   (ww4 :: [(GHC.Types.Int, GHC.Types.Int)])
                   (ww5 :: [(GHC.Types.Int, GHC.Types.Int)])
                   (ww6 :: [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]) ->
                 case w of wild {
                   DEFAULT
                   -> case Main.processMessage2
                      ret_ty (# GHC.Types.Int, GHC.Types.Int, [GHC.Types.Int],
                                [GHC.Types.Int], [(GHC.Types.Int, GHC.Types.Int)],
                                [(GHC.Types.Int, GHC.Types.Int)],
                                [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])] #)
                      of {}
                   Main.MyDist v w1 d
                   -> case v of ww7 { GHC.Types.I# ww8 ->
                      case GHC.Prim.==# ww ww8 of lwild {
                        DEFAULT
                        -> case ww1 of ww9 { GHC.Types.I# ww10 ->
                           Main.$wrecom
                             (GHC.Types.I# ww)
                             ww10
                             ww2
                             ww3
                             ww4
                             ww5
                             (Main.updateNDisAt w1 ww7 d ww6)
                             ww7 }
                        1#
                        -> (# GHC.Types.I# ww, ww1, ww2, ww3,
                              Main.updateAt ww4 ww7 Main.$fShowConfig3,
                              Main.updateAt ww5 ww7 Main.$fShowConfig3,
                              Main.updateNDisAt w1 ww7 d ww6 #) } } }) -}
eddb3f14817d8c3335668a0383685d2b
  $wrecom ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Types.Int
    -> (# GHC.Types.Int, GHC.Types.Int, [GHC.Types.Int],
          [GHC.Types.Int], [(GHC.Types.Int, GHC.Types.Int)],
          [(GHC.Types.Int, GHC.Types.Int)],
          [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])] #)
  {- Arity: 8,
     Strictness: <L,U><S,U><L,U><S,U><L,1*U><L,1*U><L,U><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: [GHC.Types.Int])
                   (ww3 :: [GHC.Types.Int])
                   (ww4 :: [(GHC.Types.Int, GHC.Types.Int)])
                   (ww5 :: [(GHC.Types.Int, GHC.Types.Int)])
                   (ww6 :: [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])])
                   (w :: GHC.Types.Int) ->
                 case Main.checkMin' w ww3 ww6 of wild {
                   []
                   -> case GHC.List.minimum2
                      ret_ty (# GHC.Types.Int, GHC.Types.Int, [GHC.Types.Int],
                                [GHC.Types.Int], [(GHC.Types.Int, GHC.Types.Int)],
                                [(GHC.Types.Int, GHC.Types.Int)],
                                [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])] #)
                      of {}
                   : ipv ipv1
                   -> case ipv of ww7 { GHC.Types.I# ww8 ->
                      case GHC.List.$wgo1 ipv1 ww8 of ww9 { DEFAULT ->
                      let {
                        ww10 :: GHC.Prim.Int# = GHC.Prim.+# 1# ww9
                      } in
                      let {
                        wild1 :: GHC.Types.Int = GHC.Types.I# ww1
                      } in
                      case GHC.Prim.<# ww10 ww1 of lwild {
                        DEFAULT
                        -> (# ww, wild1, ww2, ww3, Main.updateAt ww4 w wild1,
                              Main.updateAt ww5 w Main.processMessage1, ww6 #)
                        1#
                        -> (# ww, wild1, ww2, ww3, Main.updateAt ww4 w (GHC.Types.I# ww10),
                              Main.updateAt
                                ww5
                                w
                                (case Main.$wgetPrefW
                                        w
                                        (GHC.Types.I# (GHC.Prim.-# ww10 1#))
                                        ww6 of ww11 { DEFAULT ->
                                 GHC.Types.I# ww11 }),
                              ww6 #) } } } }) -}
5043e65702be818dc9331f336231f235
  $wrecomAllV' ::
    [GHC.Types.Int]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> (# GHC.Types.Int, GHC.Types.Int, [GHC.Types.Int],
          [GHC.Types.Int], [(GHC.Types.Int, GHC.Types.Int)],
          [(GHC.Types.Int, GHC.Types.Int)],
          [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])] #)
  {- Arity: 8,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [2] -}
0c96a0cc83d3b370161169a447b7c3fe
  data Config = Config {cfgMode :: !Main.Mode}
a0924ed4d0d04748a3674bbda28e723f
  data Message
    = MyDist GHC.Types.Int GHC.Types.Int GHC.Types.Int
    | Fail GHC.Types.Int
    | Repair GHC.Types.Int
693a77d173cafa45fb28101377f14507
  data Mode
    = Table
    | SendMessage GHC.Types.Int [GHC.Base.String]
    | MakeConnection GHC.Types.Int
    | Disconnect GHC.Types.Int
9998e9621748e31b0d4ee081a7c3c5f3
  data Network
    = Network {u :: GHC.Types.Int,
               n :: GHC.Types.Int,
               dests :: [GHC.Types.Int],
               neighU :: [GHC.Types.Int],
               dU :: [(GHC.Types.Int, GHC.Types.Int)],
               nbU :: [(GHC.Types.Int, GHC.Types.Int)],
               ndisU :: [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]}
0c96a0cc83d3b370161169a447b7c3fe
  cfgMode :: Main.Config -> Main.Mode
  RecSel Left Main.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Config) ->
                 case ds of wild { Main.Config ds1 -> ds1 }) -}
ea20796e63e12750234a9a862789fb98
  checkMin ::
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Types.Int
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,U>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: [GHC.Types.Int])
                   (w2 :: [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]) ->
                 case Main.$wcheckMin w w1 w2 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
901482fddbc94205633e74481bde26c6
  checkMin' ::
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> [GHC.Types.Int]
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,U> -}
7dc4bebbc2b18066a2456b8baaa9bf62
  checkMin'' ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Types.Int
  {- Arity: 3, Strictness: <L,U(U)><L,1*U(U)><S,1*U>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]) ->
                 case Main.$wcheckMin'' w w1 w2 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
065e65e97095dbd1657a541651236dcf
  connectSocket ::
    GHC.Types.Int -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.connectSocket1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
b03c0b40753a3bb0aedd914dde6ccda8
  connectSocket1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (portNumber :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   lvl73 :: Network.Socket.Types.PortNumber
                   = case portNumber of wild { GHC.Types.I# i ->
                     (GHC.Word.W16# (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i)))
                       `cast`
                     (Sym (Network.Socket.Types.N:PortNumber[0])) }
                 } in
                 let {
                   lvl74 :: Network.Socket.Types.SockAddr
                   = Network.Socket.Types.SockAddrInet lvl73 Main.connectSocket4
                 } in
                 letrec {
                   connect' :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Network.Socket.Types.Socket #)
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case Network.Socket.$wsocket
                            Network.Socket.Types.AF_INET
                            Network.Socket.Types.Stream
                            0#
                            s of ds1 { (#,#) ipv ipv1 ->
                     case GHC.Prim.catch#
                            @ (Data.Either.Either GHC.IO.Exception.IOException ())
                            @ GHC.Exception.Type.SomeException
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                             case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                             case Network.Socket.$wconnect
                                    ww1
                                    ww7
                                    lvl74
                                    s1 of ds2 { (#,#) ipv2 ipv3 ->
                             (# ipv2,
                                Data.Either.Right
                                  @ GHC.IO.Exception.IOException
                                  @ ()
                                  ipv3 #) } } })
                            Main.connectSocket3
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild {
                       Data.Either.Left ds
                       -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                            GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                          case ds4 of wild2 {
                            DEFAULT
                            -> case GHC.Conc.Windows.threadDelay1
                                      Main.connectSocket2
                                      ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                               connect' ipv4 }
                            0#
                            -> case GHC.Prim.delay#
                                      @ GHC.Prim.RealWorld
                                      1000#
                                      ipv2 of s' { DEFAULT ->
                               connect' s' } } }
                       Data.Either.Right ds -> (# ipv2, ipv1 #) } } }
                 } in
                 connect' eta) -}
4aa75c34f2bc55df169b1f3f400bb491
  connectSocket2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1000#) -}
a2379cb75bc58c0bef6ab1f254976fd8
  connectSocket3 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ (Data.Either.Either GHC.IO.Exception.IOException ())
                        wild
                        eta1
                   GHC.Types.True
                   -> (# eta1,
                         Data.Either.Left
                           @ GHC.IO.Exception.IOException
                           @ ()
                           e3
                             `cast`
                           (UnsafeCo representational e2 GHC.IO.Exception.IOException) #) } }) -}
46e3e70780a2c8ebce4f24d3826f00b1
  connectSocket4 :: Network.Socket.Types.HostAddress
  {- Unfolding: (case {__pkg_ccall network-2.8.0.1 GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Word# #)}
                        2130706433##
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 GHC.Word.W32# (GHC.Prim.narrow32Word# ds1) }) -}
9998e9621748e31b0d4ee081a7c3c5f3
  dU :: Main.Network -> [(GHC.Types.Int, GHC.Types.Int)]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
9998e9621748e31b0d4ee081a7c3c5f3
  dests :: Main.Network -> [GHC.Types.Int]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
909701cd5c9be27f0b84a9026c5b5b82
  failMessage :: Main.Message -> Main.Network -> Main.Network
  {- Arity: 2,
     Strictness: <S,1*U><S(LLSLLLL),1*U(U(U),U(U),U,1*U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Message) (w1 :: Main.Network) ->
                 case w1 of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case w of wild {
                   DEFAULT -> Main.failMessage1
                   Main.Fail w2
                   -> case Main.$wrecomAllV'
                             ww3
                             ww1
                             ww2
                             ww3
                             (Data.OldList.deleteBy @ GHC.Types.Int GHC.Classes.eqInt w2 ww4)
                             ww5
                             ww6
                             ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                      Main.Network ww9 ww10 ww11 ww12 ww13 ww14 ww15 } } }) -}
86045af5e144680514e756fa1d668236
  failMessage1 :: Main.Network
  {- Strictness: x -}
97660cdc972982d2ea6278675930bd09
  getDisToV ::
    (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])
    -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, Strictness: <S(LS),1*U(A,1*U)><L,U(U)>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)]))
                   (w1 :: GHC.Types.Int) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Main.$wgetDisToV' ww2 w1 of wild {
                   [] -> GHC.List.maximum2
                   : ipv ipv1
                   -> case ipv of ww3 { GHC.Types.I# ww4 ->
                      case GHC.List.$wgo ipv1 ww4 of ww5 { DEFAULT ->
                      GHC.Types.I# ww5 } } } }) -}
4073696b11e39e8c99617728f521c092
  getDisToV' ::
    (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])
    -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)><L,U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)]))
                   (w1 :: GHC.Types.Int) ->
                 case w of ww { (,) ww1 ww2 -> Main.$wgetDisToV' ww2 w1 }) -}
fa9b15d1622e83229179f22b1baaf285
  getList ::
    (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])
    -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])) ->
                 case ds of wild { (,) ds1 ns -> ns }) -}
464d55dd45ce4b01aa5bd0cc4139771e
  getPrefW ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,U(U)><S,1*U>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]) ->
                 case Main.$wgetPrefW w w1 w2 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
beba782d7520e189a73fb4888b4fb1f2
  getW ::
    (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)]) -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])) ->
                 case ds of wild { (,) w ds1 -> w }) -}
c8ea2d3416cd238fdac441a9d0946af3
  handleConnection :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(U(U),A,A,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleConnection1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
10433d9baee23e6ad11350f7e0757a98
  handleConnection1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U(U),A,A,A,1*U(U))><S,U>,
     Unfolding: (\ (connection :: Network.Socket.Types.Socket)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.handleConnection5
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case connection of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wsocketToHandle
                        ww1
                        ww7
                        GHC.IO.IOMode.ReadWriteMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         ipv3
                         Main.handleConnection3
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        ipv3
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout
                    (GHC.CString.unpackAppendCString# Main.handleConnection2 ipv7)
                    GHC.Types.True)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv6 } } } } } }) -}
b38e0c3bec80e6a49724cc3a8febb8b2
  handleConnection2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incomming connection send a message: "#) -}
5885ae7db31178e9a66678f34628d1a9
  handleConnection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.handleConnection4) -}
9953a42a0649449d2d1d2959913dfc23
  handleConnection4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Welcome"#) -}
d13cdedd278dc5c485d1a85822d3a111
  handleConnection5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.handleConnection6) -}
5fe782de231eed4eec13de6076e6e41f
  handleConnection6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Got new incomming connection"#) -}
db00813f0780d509428680d845a4c251
  initDU ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><S,1*U> -}
46ccdcbf217db67408d5cbdfeab9fd8a
  initNBU ::
    GHC.Types.Int
    -> [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U> -}
50818fc4fd20c81bb472a5ac8752dac8
  initNDis ::
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U> -}
047156dc3743c68a9988e23c7a16f0fa
  initialize :: Main.Network -> Main.Network
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U),U,U,U,A,A,A)>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Network) ->
                 case w of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Main.Network
                   ww1
                   ww2
                   ww3
                   ww4
                   (Main.initDU ww1 ww2 ww3)
                   (Main.initNBU ww1 ww3)
                   (Main.initNDis ww2 ww4 ww3) }) -}
14e1332dc6356995edc9450a09e1b1b4
  isPrefW ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,1*U(U)><S(LS),1*U(A,1*U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])) ->
                 case w2 of ww { (,) ww1 ww2 -> Main.$wisPrefW w w1 ww2 }) -}
46487653237ee9ad726eaac1f23873fa
  listenForConnections ::
    Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.listenForConnections1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7e636c888fb119501871032b377663c4
  listenForConnections1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),1*U(U))><S,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wlistenForConnections ww1 ww2 ww3 ww4 ww7 w1 } }) -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
d1aad4e2ca70f343fb79319c91e02c09
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
9998e9621748e31b0d4ee081a7c3c5f3
  n :: Main.Network -> GHC.Types.Int
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
9998e9621748e31b0d4ee081a7c3c5f3
  nbU :: Main.Network -> [(GHC.Types.Int, GHC.Types.Int)]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
9998e9621748e31b0d4ee081a7c3c5f3
  ndisU ::
    Main.Network -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
9998e9621748e31b0d4ee081a7c3c5f3
  neighU :: Main.Network -> [GHC.Types.Int]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
378c8d7bb99521af30aa2bd7bf561908
  parseConfig :: [GHC.Base.String] -> Main.Config
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Base.String]) ->
                 case Main.$wparseConfig w of ww { Unit# ww1 ->
                 Main.Config ww1 }) -}
7794e1eb85932fd4d44830dfdaa6072f
  parseConfig1 :: GHC.Types.Int
  {- Strictness: x -}
c750993c98a17797792331dcf061ba1d
  parseConfig2 :: GHC.Types.Int
  {- Strictness: x -}
56ff0ebc9addb1672373796223768646
  parseConfig3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
928983cf8134c1508ed29439031b9728
  parseConfig4 :: Main.Mode
  {- Strictness: x -}
3a82271a085c2d55a73b46fcb1cf0b72
  parseConfig5 :: Main.Config
  {- Strictness: x -}
533e96c516e5fa52ef577e0083e00c56
  portToAddress :: GHC.Types.Int -> Network.Socket.Types.SockAddr
  {- Arity: 1, Strictness: <L,1*U(U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (portNumber :: GHC.Types.Int) ->
                 Network.Socket.Types.SockAddrInet
                   (case portNumber of wild { GHC.Types.I# i ->
                    (GHC.Word.W16# (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i)))
                      `cast`
                    (Sym (Network.Socket.Types.N:PortNumber[0])) })
                   Main.connectSocket4) -}
0dafe8b06757a239e464dc18d7aa5c89
  processMessage :: Main.Message -> Main.Network -> Main.Network
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S)LLLLLL),1*U(1*U(U),U(U),U,U,1*U,1*U,1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Message) (w1 :: Main.Network) ->
                 case w1 of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww1 of ww8 { GHC.Types.I# ww9 ->
                 case Main.$wprocessMessage
                        w
                        ww9
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww10 { (#,,,,,,#) ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Main.Network ww11 ww12 ww13 ww14 ww15 ww16 ww17 } } }) -}
c727e66b0b1946813acbfe12f83b6412
  processMessage' ::
    GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int -> Main.Network -> Main.Network
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,1*U(U)><L,U><S,1*U(U,U,U,U,U,U,1*U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ (v :: GHC.Types.Int)
                   (w :: GHC.Types.Int)
                   (d :: GHC.Types.Int)
                   (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Main.Network
                   ds
                   ds1
                   ds2
                   ds3
                   ds4
                   ds5
                   (Main.updateNDisAt w v d ds6) }) -}
c586130fb551ef73c7baf20d49b46973
  processMessage1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
4c3768ed03152377c8c938d582b13bfa
  processMessage2 :: Main.Network
  {- Strictness: x -}
177ac60d7beeb82b389ce44037042478
  readCommandLineArguments ::
    GHC.Types.IO (GHC.Types.Int, [GHC.Types.Int])
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.readCommandLineArguments1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <(GHC.Types.Int, [GHC.Types.Int])>_R)) -}
24b404dfa8af42d2c0b8e3c017b1011c
  readCommandLineArguments1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Int, [GHC.Types.Int]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> case Main.readCommandLineArguments3
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                (GHC.Types.Int, [GHC.Types.Int]) #)
                      of {}
                   : me neighbours
                   -> (# ipv,
                         (case Text.Read.readEither8
                                 @ GHC.Types.Int
                                 (Text.ParserCombinators.ReadP.run
                                    @ GHC.Types.Int
                                    Main.parseConfig3
                                    me) of wild1 {
                            [] -> Main.parseConfig2
                            : x ds
                            -> case ds of wild2 { [] -> x : ipv2 ipv3 -> Main.parseConfig1 } },
                          GHC.Base.map
                            @ [GHC.Types.Char]
                            @ GHC.Types.Int
                            Main.readCommandLineArguments2
                            neighbours) #) } }) -}
953906df33a373c74ac686a846cceb79
  readCommandLineArguments2 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.parseConfig3
                           s) of wild {
                   [] -> Main.parseConfig2
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Main.parseConfig1 } }) -}
4240bf79c231fa86a9a9d6d029011902
  readCommandLineArguments3 ::
    GHC.Types.IO (GHC.Types.Int, [GHC.Types.Int])
  {- Strictness: x -}
f92c02d8a0d0c871f879c6239415090b
  recom :: Main.Network -> GHC.Types.Int -> Main.Network
  {- Arity: 2,
     Strictness: <S(LS(S)LSLLL),1*U(U,1*U(U),U,U,1*U,1*U,U)><L,U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Network) (w1 :: GHC.Types.Int) ->
                 case w of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww2 of ww8 { GHC.Types.I# ww9 ->
                 case Main.$wrecom
                        ww1
                        ww9
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        w1 of ww10 { (#,,,,,,#) ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Main.Network ww11 ww12 ww13 ww14 ww15 ww16 ww17 } } }) -}
b95f1c3910172f45f5359b582e886e16
  recom' ::
    Main.Network -> GHC.Types.Int -> GHC.Types.Int -> Main.Network
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)LLLLL),1*U(U,1*U(U),U,U,1*U,1*U,U)><L,U(U)><S(S),1*U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Network)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww2 of ww8 { GHC.Types.I# ww9 ->
                 case w2 of ww10 { GHC.Types.I# ww11 ->
                 let {
                   wild1 :: GHC.Types.Int = GHC.Types.I# ww9
                 } in
                 case GHC.Prim.<# ww11 ww9 of lwild {
                   DEFAULT
                   -> Main.Network
                        ww1
                        wild1
                        ww3
                        ww4
                        (Main.updateAt ww5 w1 wild1)
                        (Main.updateAt ww6 w1 Main.processMessage1)
                        ww7
                   1#
                   -> Main.Network
                        ww1
                        wild1
                        ww3
                        ww4
                        (Main.updateAt ww5 w1 (GHC.Types.I# ww11))
                        (Main.updateAt
                           ww6
                           w1
                           (case Main.$wgetPrefW
                                   w1
                                   (GHC.Types.I# (GHC.Prim.-# ww11 1#))
                                   ww7 of ww12 { DEFAULT ->
                            GHC.Types.I# ww12 }))
                        ww7 } } } }) -}
65fbebb9cc8ecebf5ef688b87542b6a3
  recomAllV :: Main.Network -> Main.Network
  {- Arity: 1, Strictness: <S(LLSLLLL),1*U(U(U),U(U),U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Main.recomAllV_recomAllV' ds2 wild }) -}
ea2012a7ceef7a3abeaad5f0ffda9e3e
  recomAllV_recomAllV' ::
    [GHC.Types.Int] -> Main.Network -> Main.Network
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U(U),U(U),U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [GHC.Types.Int]) (w1 :: Main.Network) ->
                 case w1 of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Main.$wrecomAllV'
                        w
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Main.Network ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
32dd8b374a025adabfdfbe71782843da
  recomLocal :: Main.Network -> GHC.Types.Int -> Main.Network
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,1*U,1*U,U)><L,U(U)>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Network) (w1 :: GHC.Types.Int) ->
                 case w of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Main.Network
                   ww1
                   ww2
                   ww3
                   ww4
                   (Main.updateAt ww5 w1 Main.$fShowConfig3)
                   (Main.updateAt ww6 w1 Main.$fShowConfig3)
                   ww7 }) -}
f9e8755a9288917be957741938e32c2d
  recompute :: Main.Network -> GHC.Types.Int -> Main.Network
  {- Arity: 2,
     Strictness: <S(S(S)LLLLLL),1*U(1*U(U),U(U),U,U,1*U,1*U,U)><S(S),1*U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Network) (w1 :: GHC.Types.Int) ->
                 case w of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww1 of ww8 { GHC.Types.I# ww9 ->
                 case w1 of ww10 { GHC.Types.I# ww11 ->
                 let {
                   wild1 :: GHC.Types.Int = GHC.Types.I# ww11
                 } in
                 case GHC.Prim.==# ww9 ww11 of lwild {
                   DEFAULT
                   -> case ww2 of ww12 { GHC.Types.I# ww13 ->
                      case Main.$wrecom
                             (GHC.Types.I# ww9)
                             ww13
                             ww3
                             ww4
                             ww5
                             ww6
                             ww7
                             wild1 of ww14 { (#,,,,,,#) ww15 ww16 ww17 ww18 ww19 ww20 ww21 ->
                      Main.Network ww15 ww16 ww17 ww18 ww19 ww20 ww21 } }
                   1#
                   -> Main.Network
                        (GHC.Types.I# ww9)
                        ww2
                        ww3
                        ww4
                        (Main.updateAt ww5 wild1 Main.$fShowConfig3)
                        (Main.updateAt ww6 wild1 Main.$fShowConfig3)
                        ww7 } } } }) -}
bcada28c7ff5b1e9d74374d8f063cacb
  repairAllV :: GHC.Types.Int -> Main.Network -> Main.Network
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U)><S(LLSLLLL),1*U(U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 case ds2 of wild1 {
                   [] -> wild
                   : v vs
                   -> Main.Network
                        ds
                        ds1
                        wild1
                        ds3
                        ds4
                        ds5
                        (Main.updateNDisAt w v ds1 ds6) } }) -}
1d2ecc759630008bbfba38ccf6402e42
  repairMessage :: Main.Message -> Main.Network -> Main.Network
  {- Arity: 2,
     Strictness: <S,1*U><S(LLSLLLL),1*U(U,U,1*U,1*U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Message) (w1 :: Main.Network) ->
                 case w1 of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case w of wild {
                   DEFAULT -> Main.repairMessage1
                   Main.Repair w2
                   -> case ww3 of wild1 {
                        []
                        -> Main.Network
                             ww1
                             ww2
                             (GHC.Types.[] @ GHC.Types.Int)
                             (GHC.Base.augment
                                @ GHC.Types.Int
                                (\ @ b
                                   (c :: GHC.Types.Int -> b -> b)[OneShot]
                                   (n1 :: b)[OneShot] ->
                                 GHC.Base.foldr @ GHC.Types.Int @ b c n1 ww4)
                                (GHC.Types.: @ GHC.Types.Int w2 (GHC.Types.[] @ GHC.Types.Int)))
                             ww5
                             ww6
                             ww7
                        : v vs
                        -> Main.Network
                             ww1
                             ww2
                             wild1
                             (GHC.Base.augment
                                @ GHC.Types.Int
                                (\ @ b
                                   (c :: GHC.Types.Int -> b -> b)[OneShot]
                                   (n1 :: b)[OneShot] ->
                                 GHC.Base.foldr @ GHC.Types.Int @ b c n1 ww4)
                                (GHC.Types.: @ GHC.Types.Int w2 (GHC.Types.[] @ GHC.Types.Int)))
                             ww5
                             ww6
                             (Main.updateNDisAt w2 v ww2 ww7) } } }) -}
866bee99b5e08d74c9007db199739d27
  repairMessage1 :: Main.Network
  {- Strictness: x -}
a409e6b43c5a223de891b6c710375886
  singleNeighbourNDis ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,1*U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (n1 :: GHC.Types.Int)
                   (w :: GHC.Types.Int)
                   (vs :: [GHC.Types.Int]) ->
                 (w, Main.singleNeighbourNDis_singleNeighbourNDis' n1 vs)) -}
b8487f8f43fe93cd4e5f01f633a34c63
  singleNeighbourNDis_singleNeighbourNDis' ::
    GHC.Types.Int
    -> [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
9998e9621748e31b0d4ee081a7c3c5f3
  u :: Main.Network -> GHC.Types.Int
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
2f48435bb208b40e3744f2d18f2f17bf
  updateAt ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><L,U> -}
9fd9c9b6e551b2993ceeea02b98e848d
  updateN :: GHC.Types.Int -> Main.Network -> Main.Network
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U)><S,1*U(U,1*U(U),U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Main.Network
                   ds
                   (case ds1 of wild1 { GHC.Types.I# x1 ->
                    case x of wild2 { GHC.Types.I# y ->
                    GHC.Types.I# (GHC.Prim.+# x1 y) } })
                   ds2
                   ds3
                   ds4
                   ds5
                   ds6 }) -}
d524ffc23e46c186c3b48f8b806939e2
  updateNDisAt ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,U(U)><L,U><S,1*U> -}
3de71698ae13d5ec6cb08044063b0c0a
  updateNeighU :: [GHC.Types.Int] -> Main.Network -> Main.Network
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U><S,1*U(U,U,U,1*U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Types.Int]) (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Main.Network
                   ds
                   ds1
                   ds2
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b
                         (c :: GHC.Types.Int -> b -> b)[OneShot]
                         (n1 :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n1 ds3)
                      x)
                   ds4
                   ds5
                   ds6 }) -}
974220e8143bf85177a991316b57f437
  updateV :: [GHC.Types.Int] -> Main.Network -> Main.Network
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U><S,1*U(U,U,1*U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Types.Int]) (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Main.Network
                   ds
                   ds1
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b
                         (c :: GHC.Types.Int -> b -> b)[OneShot]
                         (n1 :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n1 ds2)
                      x)
                   ds3
                   ds4
                   ds5
                   ds6 }) -}
instance GHC.Show.Show [Main.Config] = Main.$fShowConfig
instance GHC.Show.Show [Main.Mode] = Main.$fShowMode
instance GHC.Show.Show [Main.Network] = Main.$fShowNetwork
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:



==================== FINAL INTERFACE ====================
2020-01-02 17:06:38.6828878 UTC

interface main:Main 8065
  interface hash: f9d2e6907846d38e0e0c808302990b1c
  ABI hash: 4df74ead35f11debf2901d277b79d36b
  export-list hash: 22be4d2bfa89f69865e8f1fe8ed1b112
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ae9388f01c2a659567cddc212a47a250
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.connectSocket
  Main.handleConnection
  Main.initDU
  Main.initNBU
  Main.initNDis
  Main.initialize
  Main.listenForConnections
  Main.main
  Main.portToAddress
  Main.readCommandLineArguments
  Main.singleNeighbourNDis
  Main.updateN
  Main.updateNeighU
  Main.updateV
  Main.Message{Main.Fail Main.MyDist Main.Repair}
  Main.Network{Main.Network dU dests n nbU ndisU neighU u}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 network-2.8.0.1 stm-2.5.0.0
orphans: stm-2.5.0.0:Control.Monad.STM
         network-2.8.0.1:Network.Socket base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Exts base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Concurrent db627a2e14aa77645810b5e18852cc54
import  -/  base-4.12.0.0:Control.Exception 68d632685955b01899aa782b05b79cdf
import  -/  base-4.12.0.0:Control.Exception.Base 520b7537fcce27638136bb16d9a55e53
import  -/  base-4.12.0.0:Control.Monad 54356f938d3817a0115f506fce4f2fa3
import  -/  base-4.12.0.0:Data.Either 3f22662ea029dfb63e64f318274cbbbd
import  -/  base-4.12.0.0:Data.Foldable bdeac546b12282c8986759606b9295a5
import  -/  base-4.12.0.0:Data.IORef 9fe6be300ad920563b6d0585952c3155
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Conc.IO e5574a04330387198d27d33dfb992cd8
import  -/  base-4.12.0.0:GHC.Conc.Sync fae6c83841bcf1584e2587725f53d9ce
import  -/  base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import  -/  base-4.12.0.0:GHC.IO.Exception 99271e07ec0e09b76d45c79794dad266
import  -/  base-4.12.0.0:GHC.IO.Handle 5b3f689b082eee6e7562e9b58323b91a
import  -/  base-4.12.0.0:GHC.IO.Handle.FD 5b13f4cf43b26c3d52e20458852a8546
import  -/  base-4.12.0.0:GHC.IO.Handle.Text 2ca19f0c4c6b23c3ad9d1464d36c5281
import  -/  base-4.12.0.0:GHC.IO.Handle.Types b0667350495b7969f4b13a8e9686d1b4
import  -/  base-4.12.0.0:GHC.IO.IOMode 64e15bc6e405c4ae814493543509e7ab
import  -/  base-4.12.0.0:GHC.IORef 08be4ed51bab2548b874b071705c05a2
import  -/  base-4.12.0.0:GHC.Num 8203d3fee487126cffd5e55ba5d0e8c3
import  -/  base-4.12.0.0:GHC.Real 3b42f3125c1d17d4e4b4437a3c97310f
import  -/  base-4.12.0.0:GHC.Show fa6032f3f820e8e8ec87b97bdca4e160
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Environment 045df705c1f205b31d24a0f6340ea2db
import  -/  base-4.12.0.0:System.IO 51ffc52e2e8495d5c7b596557cf2be89
import  -/  base-4.12.0.0:Text.Read 580457154dc9d710b792a13b428d58dd
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  network-2.8.0.1:Network.Socket cccb3c178b1f8d4043b518ed5f994246
import  -/  network-2.8.0.1:Network.Socket.Types 8885d0583783d86ae72c97c90ee0757a
import  -/  stm-2.5.0.0:Control.Concurrent.STM c418f6f5d5174c7fcc2a4eb1734356a3
11692a94de9943bd972d7d58b0d1cb1c
  $fShowNetwork :: GHC.Show.Show Main.Network
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Network
                  Main.$fShowNetwork_$cshowsPrec
                  Main.$fShowNetwork_$cshow
                  Main.$fShowNetwork_$cshowList -}
11692a94de9943bd972d7d58b0d1cb1c
  $fShowNetwork1 :: Main.Network -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Main.Network) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 w1 }) -}
cbe9f5cd368901dac6ce30677c95c8a4
  $fShowNetwork2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
11692a94de9943bd972d7d58b0d1cb1c
  $fShowNetwork_$cshow :: Main.Network -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Network) ->
                 Main.$fShowNetwork_$cshowsPrec
                   Main.$fShowNetwork2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
11692a94de9943bd972d7d58b0d1cb1c
  $fShowNetwork_$cshowList :: [Main.Network] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Network]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Network Main.$fShowNetwork1 ls s) -}
11692a94de9943bd972d7d58b0d1cb1c
  $fShowNetwork_$cshowsPrec ::
    GHC.Types.Int -> Main.Network -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Network)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Network ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 w2 } }) -}
ac20f1150c77f71f91320515f16574db
  $tc'Fail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10289974402198452585##
                   2467907747763061704##
                   Main.$trModule
                   Main.$tc'Fail2
                   0#
                   Main.$tc'Fail1) -}
3600c8f64daa1f00a96a5576979fa3ad
  $tc'Fail1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
631fcdd94b1f2097a33ea82b008e6240
  $tc'Fail2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Fail3) -}
cafd21127c76469c60a6f795b7bf5e9f
  $tc'Fail3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Fail"#) -}
e11a0fd9fbeb2c9335b34f696df6eefa
  $tc'MyDist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2983857343219674188##
                   7119897320658145313##
                   Main.$trModule
                   Main.$tc'MyDist2
                   0#
                   Main.$tc'MyDist1) -}
9db8faffaba28e88ddec6c64796d3bde
  $tc'MyDist1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
94d9ed765198f14e7869942eb10fa78b
  $tc'MyDist2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'MyDist3) -}
37db7880915b395de631f7f0b964ff8d
  $tc'MyDist3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MyDist"#) -}
5045e53760825f8337bb060d85fcf5d3
  $tc'Network :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16556360694637520600##
                   14670768776310000622##
                   Main.$trModule
                   Main.$tc'Network2
                   0#
                   Main.$tc'Network1) -}
4eafe5fabf4e372e2d889c80beb7af2b
  $tc'Network1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fc5469ee4b522e6a519559f88a3b03d1
  $tc'Network2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Network3) -}
0397e31cd668ae25710dafc78cee13dd
  $tc'Network3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Network"#) -}
3a97463831472567451f8ffdf92056c5
  $tc'Repair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16869644302034022387##
                   5078037645778573254##
                   Main.$trModule
                   Main.$tc'Repair1
                   0#
                   Main.$tc'Fail1) -}
0e48434cec0475461c7f7c796773ae3a
  $tc'Repair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Repair2) -}
89a3f40b957a2605ee7fd0bd7ac1b3d9
  $tc'Repair2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Repair"#) -}
9f82a2615d2517bade7b8f10f800b21a
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4281840789288854734##
                   3956224079122367496##
                   Main.$trModule
                   Main.$tcMessage1
                   0#
                   GHC.Types.krep$*) -}
0cdef909b663f81e7bdb48dff574426e
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcMessage2) -}
7b0ceb6833994ad4dd6f3399e7964cf1
  $tcMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Message"#) -}
45e52e4d937710bb0b467a86490e55c8
  $tcNetwork :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7223228021634007101##
                   12508657813776177072##
                   Main.$trModule
                   Main.$tcNetwork1
                   0#
                   GHC.Types.krep$*) -}
439e034b051ec91e0c912d66db66fb4f
  $tcNetwork1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcNetwork2) -}
cc77bf2995080907a2391f4e25836992
  $tcNetwork2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Network"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
27a4fc25620712f592eda5d98e85c6a9
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 9,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [2] -}
3b2800cbb89deca358718e8b771a539a
  $wlistenForConnections ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [2] -}
37c2c00a9ca738c4f26b04e1f959a408
  data Message
    = MyDist (GHC.Types.Int, GHC.Types.Int)
    | Fail GHC.Types.Int
    | Repair GHC.Types.Int
11692a94de9943bd972d7d58b0d1cb1c
  data Network
    = Network {u :: GHC.Types.Int,
               n :: GHC.Types.Int,
               dests :: [GHC.Types.Int],
               neighU :: [GHC.Types.Int],
               dU :: [(GHC.Types.Int, GHC.Types.Int)],
               nbU :: [(GHC.Types.Int, GHC.Types.Int)],
               ndisU :: [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]}
97f52fea4bb147c3d1ca5b8a89595db5
  connectSocket ::
    GHC.Types.Int -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.connectSocket1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
9d2b0034c3eb1991b5c4f2659c926aac
  connectSocket1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (portNumber :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   lvl49 :: Network.Socket.Types.PortNumber
                   = case portNumber of wild { GHC.Types.I# i ->
                     (GHC.Word.W16# (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i)))
                       `cast`
                     (Sym (Network.Socket.Types.N:PortNumber[0])) }
                 } in
                 let {
                   lvl50 :: Network.Socket.Types.SockAddr
                   = Network.Socket.Types.SockAddrInet lvl49 Main.connectSocket4
                 } in
                 letrec {
                   connect' :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Network.Socket.Types.Socket #)
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case Network.Socket.$wsocket
                            Network.Socket.Types.AF_INET
                            Network.Socket.Types.Stream
                            0#
                            s of ds1 { (#,#) ipv ipv1 ->
                     case GHC.Prim.catch#
                            @ (Data.Either.Either GHC.IO.Exception.IOException ())
                            @ GHC.Exception.Type.SomeException
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                             case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                             case Network.Socket.$wconnect
                                    ww1
                                    ww7
                                    lvl50
                                    s1 of ds2 { (#,#) ipv2 ipv3 ->
                             (# ipv2,
                                Data.Either.Right
                                  @ GHC.IO.Exception.IOException
                                  @ ()
                                  ipv3 #) } } })
                            Main.connectSocket3
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild {
                       Data.Either.Left ds
                       -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                            GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                          case ds4 of wild2 {
                            DEFAULT
                            -> case GHC.Conc.Windows.threadDelay1
                                      Main.connectSocket2
                                      ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                               connect' ipv4 }
                            0#
                            -> case GHC.Prim.delay#
                                      @ GHC.Prim.RealWorld
                                      1000#
                                      ipv2 of s' { DEFAULT ->
                               connect' s' } } }
                       Data.Either.Right ds -> (# ipv2, ipv1 #) } } }
                 } in
                 connect' eta) -}
4aa75c34f2bc55df169b1f3f400bb491
  connectSocket2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1000#) -}
a2379cb75bc58c0bef6ab1f254976fd8
  connectSocket3 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ (Data.Either.Either GHC.IO.Exception.IOException ())
                        wild
                        eta1
                   GHC.Types.True
                   -> (# eta1,
                         Data.Either.Left
                           @ GHC.IO.Exception.IOException
                           @ ()
                           e3
                             `cast`
                           (UnsafeCo representational e2 GHC.IO.Exception.IOException) #) } }) -}
46e3e70780a2c8ebce4f24d3826f00b1
  connectSocket4 :: Network.Socket.Types.HostAddress
  {- Unfolding: (case {__pkg_ccall network-2.8.0.1 GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Word# #)}
                        2130706433##
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 GHC.Word.W32# (GHC.Prim.narrow32Word# ds1) }) -}
11692a94de9943bd972d7d58b0d1cb1c
  dU :: Main.Network -> [(GHC.Types.Int, GHC.Types.Int)]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
11692a94de9943bd972d7d58b0d1cb1c
  dests :: Main.Network -> [GHC.Types.Int]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
3a3c09a2fc1e0aed0330c4d67bb5a4a7
  handleConnection :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(U(U),A,A,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleConnection1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
77c1d6a35ed910ee7bc924f8ad8a5cb5
  handleConnection1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U(U),A,A,A,1*U(U))><S,U>,
     Unfolding: (\ (connection :: Network.Socket.Types.Socket)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.handleConnection5
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case connection of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wsocketToHandle
                        ww1
                        ww7
                        GHC.IO.IOMode.ReadWriteMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         ipv3
                         Main.handleConnection3
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        ipv3
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         (GHC.CString.unpackAppendCString# Main.handleConnection2 ipv7)
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 GHC.IO.Handle.hClose1 ipv3 ipv8 } } } } } } }) -}
b38e0c3bec80e6a49724cc3a8febb8b2
  handleConnection2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incomming connection send a message: "#) -}
5885ae7db31178e9a66678f34628d1a9
  handleConnection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.handleConnection4) -}
9953a42a0649449d2d1d2959913dfc23
  handleConnection4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Welcome"#) -}
d13cdedd278dc5c485d1a85822d3a111
  handleConnection5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.handleConnection6) -}
5fe782de231eed4eec13de6076e6e41f
  handleConnection6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Got new incomming connection"#) -}
db00813f0780d509428680d845a4c251
  initDU ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><S,1*U> -}
46ccdcbf217db67408d5cbdfeab9fd8a
  initNBU ::
    GHC.Types.Int
    -> [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U> -}
50818fc4fd20c81bb472a5ac8752dac8
  initNDis ::
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U> -}
0a1b35e0bd45ab874b5217e82ef9bce3
  initialize :: Main.Network -> Main.Network
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U),U,U,U,A,A,A)>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Network) ->
                 case w of ww { Main.Network ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Main.Network
                   ww1
                   ww2
                   ww3
                   ww4
                   (Main.initDU ww1 ww2 ww3)
                   (Main.initNBU ww1 ww3)
                   (Main.initNDis ww2 ww4 ww3) }) -}
46487653237ee9ad726eaac1f23873fa
  listenForConnections ::
    Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.listenForConnections1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7e636c888fb119501871032b377663c4
  listenForConnections1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),1*U(U))><S,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wlistenForConnections ww1 ww2 ww3 ww4 ww7 w1 } }) -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
d1aad4e2ca70f343fb79319c91e02c09
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
11692a94de9943bd972d7d58b0d1cb1c
  n :: Main.Network -> GHC.Types.Int
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
11692a94de9943bd972d7d58b0d1cb1c
  nbU :: Main.Network -> [(GHC.Types.Int, GHC.Types.Int)]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
11692a94de9943bd972d7d58b0d1cb1c
  ndisU ::
    Main.Network -> [(GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
11692a94de9943bd972d7d58b0d1cb1c
  neighU :: Main.Network -> [GHC.Types.Int]
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
533e96c516e5fa52ef577e0083e00c56
  portToAddress :: GHC.Types.Int -> Network.Socket.Types.SockAddr
  {- Arity: 1, Strictness: <L,1*U(U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (portNumber :: GHC.Types.Int) ->
                 Network.Socket.Types.SockAddrInet
                   (case portNumber of wild { GHC.Types.I# i ->
                    (GHC.Word.W16# (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i)))
                      `cast`
                    (Sym (Network.Socket.Types.N:PortNumber[0])) })
                   Main.connectSocket4) -}
4cd25b90e6c7f534d1935ac7d2863516
  readCommandLineArguments ::
    GHC.Types.IO (GHC.Types.Int, [GHC.Types.Int])
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.readCommandLineArguments1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <(GHC.Types.Int, [GHC.Types.Int])>_R)) -}
944776ecefc7062dc95f9e160e51a11c
  readCommandLineArguments1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Int, [GHC.Types.Int]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> case Main.readCommandLineArguments6
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                (GHC.Types.Int, [GHC.Types.Int]) #)
                      of {}
                   : me neighbours
                   -> (# ipv,
                         (case Text.Read.readEither8
                                 @ GHC.Types.Int
                                 (Text.ParserCombinators.ReadP.run
                                    @ GHC.Types.Int
                                    Main.readCommandLineArguments5
                                    me) of wild1 {
                            [] -> Main.readCommandLineArguments4
                            : x ds
                            -> case ds of wild2 {
                                 [] -> x : ipv2 ipv3 -> Main.readCommandLineArguments3 } },
                          GHC.Base.map
                            @ [GHC.Types.Char]
                            @ GHC.Types.Int
                            Main.readCommandLineArguments2
                            neighbours) #) } }) -}
21aa7c9449609ca860fd13a52b048587
  readCommandLineArguments2 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.readCommandLineArguments5
                           s) of wild {
                   [] -> Main.readCommandLineArguments4
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Main.readCommandLineArguments3 } }) -}
3b3720213d5658e840f033e1f60bc89b
  readCommandLineArguments3 :: GHC.Types.Int
  {- Strictness: x -}
0a71e1fb3d09b5ca404fce2f6d08bd51
  readCommandLineArguments4 :: GHC.Types.Int
  {- Strictness: x -}
1a9b2a7651aae67074874083a319a162
  readCommandLineArguments5 ::
    Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
01a25df3a1c9ef6b981d8c86c563cd75
  readCommandLineArguments6 ::
    GHC.Types.IO (GHC.Types.Int, [GHC.Types.Int])
  {- Strictness: x -}
a409e6b43c5a223de891b6c710375886
  singleNeighbourNDis ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> (GHC.Types.Int, [(GHC.Types.Int, GHC.Types.Int)])
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,1*U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (n1 :: GHC.Types.Int)
                   (w :: GHC.Types.Int)
                   (vs :: [GHC.Types.Int]) ->
                 (w, Main.singleNeighbourNDis_singleNeighbourNDis' n1 vs)) -}
b8487f8f43fe93cd4e5f01f633a34c63
  singleNeighbourNDis_singleNeighbourNDis' ::
    GHC.Types.Int
    -> [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
11692a94de9943bd972d7d58b0d1cb1c
  u :: Main.Network -> GHC.Types.Int
  RecSel Left Main.Network
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Network) ->
                 case ds of wild { Main.Network ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
69d9ca900e55c8a9676cfad955d6f86d
  updateN :: GHC.Types.Int -> Main.Network -> Main.Network
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U)><S,1*U(U,1*U(U),U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Main.Network
                   ds
                   (case ds1 of wild1 { GHC.Types.I# x1 ->
                    case x of wild2 { GHC.Types.I# y ->
                    GHC.Types.I# (GHC.Prim.+# x1 y) } })
                   ds2
                   ds3
                   ds4
                   ds5
                   ds6 }) -}
a66dbad1c414d16f661a41e9d70e784a
  updateNeighU :: [GHC.Types.Int] -> Main.Network -> Main.Network
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U><S,1*U(U,U,U,1*U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Types.Int]) (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Main.Network
                   ds
                   ds1
                   ds2
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b
                         (c :: GHC.Types.Int -> b -> b)[OneShot]
                         (n1 :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n1 ds3)
                      x)
                   ds4
                   ds5
                   ds6 }) -}
093fbb8234423409435da9f51ef8a298
  updateV :: [GHC.Types.Int] -> Main.Network -> Main.Network
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U><S,1*U(U,U,1*U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Types.Int]) (network :: Main.Network) ->
                 case network of wild { Main.Network ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Main.Network
                   ds
                   ds1
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b
                         (c :: GHC.Types.Int -> b -> b)[OneShot]
                         (n1 :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n1 ds2)
                      x)
                   ds3
                   ds4
                   ds5
                   ds6 }) -}
instance GHC.Show.Show [Main.Network] = Main.$fShowNetwork
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

